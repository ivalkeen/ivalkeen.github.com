<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ivan Tkalin</title>
    <description>My blogging about ruby, javascript and everything related</description>
    <link>https://www.tkalin.com/</link>
    <atom:link href="https://www.tkalin.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 28 May 2016 19:41:25 +0200</pubDate>
    <lastBuildDate>Sat, 28 May 2016 19:41:25 +0200</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>IDE-like &quot;Go to Declaration&quot; in Vim</title>
        <description>&lt;p&gt;I always wanted ‘Go to declaration’ feature in Vim with fuzzy-search, like in many modern IDEs.
Of course, Vim has a built-in support of tags jumping, but for some programming languages, like Ruby (when you may have dozens of classes named &lt;code class=&quot;highlighter-rouge&quot;&gt;Base&lt;/code&gt;),
locating and picking the right declaration may be painful.
I didn’t find any existing solutions, so I wrote a small &lt;a href=&quot;https://github.com/ivalkeen/vim-ctrlp-tjump&quot;&gt;plugin&lt;/a&gt; for that.&lt;/p&gt;

&lt;p&gt;Here is a demo showing how this plugin works for Ruby file, but it’s not limited to Ruby.&lt;/p&gt;

&lt;div style=&quot;position: relative; padding-bottom: 65%; padding-top: 25px; height: 0;&quot;&gt;
&lt;iframe style=&quot;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&quot; width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/42jB5MK5WwI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;You need to have tags working for your project. Configuring tags generation is out of scope of this article, because it’s language specific.
 For ruby you can check &lt;a href=&quot;https://www.tkalin.com/blog_posts/navigating-your-rails-project-codebase-with-vim/&quot;&gt;this guide&lt;/a&gt;, but, please, keep in mind that it is outdated, and now I use &lt;a href=&quot;https://github.com/tmm1/ripper-tags&quot;&gt;ripper-tags&lt;/a&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;ctags&lt;/code&gt; to generate tags.&lt;/p&gt;

    &lt;p&gt;Vim wiki has an &lt;a href=&quot;http://vim.wikia.com/wiki/Browsing_programs_with_tags&quot;&gt;article&lt;/a&gt; describing how to configure tags in Vim.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You need &lt;a href=&quot;https://github.com/kien/ctrlp.vim&quot;&gt;CtrlP&lt;/a&gt; plugin to be installed and working&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install &lt;a href=&quot;https://github.com/ivalkeen/vim-ctrlp-tjump&quot;&gt;vim-ctrlp-tjump&lt;/a&gt; plugin using your favorite method. I recommend using &lt;a href=&quot;https://github.com/Shougo/neobundle.vim&quot;&gt;NeoBundle&lt;/a&gt;, &lt;a href=&quot;https://github.com/gmarik/Vundle.vim&quot;&gt;Vundle&lt;/a&gt; or &lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create mappings (optional):&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; nnoremap &amp;lt;c-]&amp;gt; :CtrlPtjump&amp;lt;cr&amp;gt;
 vnoremap &amp;lt;c-]&amp;gt; :CtrlPtjumpVisual&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;This is not necessary step. You can use commands &lt;code class=&quot;highlighter-rouge&quot;&gt;:CtrlPtjump&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:CtrlPtjumpVisual&lt;/code&gt; without mappings or create your custom mappings.
 Personally I find remapping of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;c-]&amp;gt;&lt;/code&gt; convenient, because it is default Vim’s mapping for &lt;code class=&quot;highlighter-rouge&quot;&gt;:tag&lt;/code&gt; command.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Move cursor to the Class/Method usage in your code&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Press &lt;code class=&quot;highlighter-rouge&quot;&gt;c-]&lt;/code&gt; (if you have created mapping) or just execute &lt;code class=&quot;highlighter-rouge&quot;&gt;:CtrlPtjump&lt;/code&gt; command (or &lt;code class=&quot;highlighter-rouge&quot;&gt;:CtrlPtjumpVisual&lt;/code&gt; in visual mode) in the command line.
 You should see &lt;code class=&quot;highlighter-rouge&quot;&gt;CtrlP&lt;/code&gt; window with all definitions of the tag under cursor:&lt;/p&gt;

    &lt;p&gt;&lt;img class=&quot;img img-responsive&quot; src=&quot;https://i.imgur.com/1UrMOpd.png&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;You can type path/file fragments to narrow down the search using CtrlP’s fuzzy-search.&lt;/p&gt;

    &lt;p&gt;Press &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt; to open declaration in the same window, &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl-T&lt;/code&gt; to open declaration in the new Tab.
 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl-S&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl-V&lt;/code&gt; will open declaration in a horizontal or vertical split respectively.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;Sometimes paths to declarations can be really long, for example for tags for ruby gems.
There is an option to display paths in a shortened format:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let g:ctrlp_tjump_shortener = [&#39;/home/.*/gems/&#39;, &#39;.../&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If there is only one tag found, it is possible to open it without opening CtrlP
window:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let g:ctrlp_tjump_only_silent = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Using tags and &lt;a href=&quot;https://github.com/ivalkeen/vim-ctrlp-tjump&quot;&gt;vim-ctrlp-tjump&lt;/a&gt; plugin significantly improved my workflow of working with large Ruby codebases in Vim.&lt;/p&gt;

&lt;p&gt;If you have any questions about plugin or suggestions on how to improve this guide, please feel free to comment&lt;/p&gt;
</description>
        <pubDate>Sun, 10 May 2015 19:00:00 +0200</pubDate>
        <link>https://www.tkalin.com/blog_posts/ide-like-go-to-declaration-in-vim</link>
        <guid isPermaLink="true">https://www.tkalin.com/blog_posts/ide-like-go-to-declaration-in-vim</guid>
        
        <category>vim</category>
        
        <category>ctags</category>
        
        
      </item>
    
      <item>
        <title>Upgrading to RSpec 3.x</title>
        <description>&lt;p&gt;This short article is TL;DR of the talk: &lt;a href=&quot;https://www.youtube.com/watch?v=5D4UbNui3rE&quot;&gt;RSpec 3 and why I expect(you).to care by Jon Rowe&lt;/a&gt;.
I picked 3 important recommendations out of this talk which I’m going to follow.&lt;/p&gt;

&lt;h2 id=&quot;use-zero-monkey-patching-mode&quot;&gt;1. Use zero monkey patching mode&lt;/h2&gt;

&lt;p&gt;This will completely disable all the monkey patching and will make RSpec less magical. Of course, it has a few consequences:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DSL will not be exposed globally, so &lt;code class=&quot;highlighter-rouge&quot;&gt;RSpec.describe&lt;/code&gt; must be used instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;describe&lt;/code&gt; etc.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;should&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;should_not&lt;/code&gt; syntax will be disabled, so &lt;code class=&quot;highlighter-rouge&quot;&gt;expect()&lt;/code&gt; syntax must be used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To enable zero monkey patching mode, just add this line to RSpec configuration:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;disable_monkey_pathing!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;use-verified-doubles&quot;&gt;2. Use verified doubles&lt;/h2&gt;

&lt;p&gt;This will enable checking that the contract of the mock corresponds to the contract of the real object.
It means that if methods being mocked/stubbed are not actually implemented by the object behind test double, the test will fail with error.&lt;/p&gt;

&lt;p&gt;Once it’s enabled, &lt;code class=&quot;highlighter-rouge&quot;&gt;instance_double&lt;/code&gt; should be used instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;double&lt;/code&gt; to create verified doubles. &lt;code class=&quot;highlighter-rouge&quot;&gt;allow()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;expect()&lt;/code&gt; methods for real objects just work.&lt;/p&gt;

&lt;p&gt;To enable verified doubles, just add this line to RSpec configuration:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;verify_partial_doubles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this doesn’t play very well with &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Base&lt;/code&gt; models in Rails, because Rails loads columns dynamically, so don’t try to verify columns of rails models.&lt;/p&gt;

&lt;h2 id=&quot;upgrading-from-rspec-2-to-3&quot;&gt;3. Upgrading from RSpec 2 to 3:&lt;/h2&gt;

&lt;p&gt;Upgrade from RSpec 2 to RSpec 3 should be easy if you follow this simple guide:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Upgrade to latest version of RSpec 2.99 first and fix all deprecations&lt;/li&gt;
  &lt;li&gt;Use &lt;a href=&quot;https://github.com/yujinakayama/transpec&quot;&gt;transpec&lt;/a&gt; to convert all existing specs to 3 syntax&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 26 Apr 2015 17:00:00 +0200</pubDate>
        <link>https://www.tkalin.com/blog_posts/upgrading-to-rspec3</link>
        <guid isPermaLink="true">https://www.tkalin.com/blog_posts/upgrading-to-rspec3</guid>
        
        <category>ruby</category>
        
        <category>rspec</category>
        
        
      </item>
    
      <item>
        <title>Rails 4: Disable assets caching for development/test environments</title>
        <description>&lt;p&gt;Ruby on Rails by default caches pre-compiled assets (sass, coffeescripts) to tmp/cache/assets directory in development and test environments. It makes page loading in development and running test faster (when assets are already precompiled), but may cause some weird bugs.&lt;/p&gt;

&lt;p&gt;For example, when I was upgrading my Rails 3.2 application to Rails 4, I noticed that there are deprecation messages on CI server, but not on my local machine. I started investigating it and found, that these deprecation messages come from SASS file in one of my gems (it was twitter bootstrap 2.0.1). And these deprecation messages appear on my dev machine only if I clean assets cache before running tests.&lt;/p&gt;

&lt;p&gt;Another issue with file system assets cache in test environment, is that when running test in parallel (I use parallel_test gem), and assets cache is not built yet, tests may fail because of errors with concurrent access to cache files from different processes.&lt;/p&gt;

&lt;p&gt;Main problem with file system assets cache in development environment was that cache was not always rebuilt when it needed to. For example, when I was upgrading to newer bootstrap version, new bootstrap stylesheets were not build and my development version looked pretty fine, but on production it was totally broken. I was able to reproduce it on my dev machine only after cleaning assets cache.&lt;/p&gt;

&lt;p&gt;After facing all these issues, I decided to disable assets file system cache, and change it to memory cache. Which means, that cache is built and stored in memory while process (rspec or rails server) is active. It can be done by adding following code to application.rb:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Use memory store for assets cache in development/test to avoid caching&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# to tmp/assets, because it causes hiding of deprecation messages in&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# stylesheets, sometimes break parallel_tests and doesn&#39;t always refresh&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# gem stylesheets in development&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;development?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lookup_store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:memory_store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I found that for my application, assets cache is built pretty fast, and I didn’t notice any significant performance penalties after doing it. And I didn’t notice (yet) any other downsides of this approach. Now I have a little bit more control over my front-end code and it makes me feel better.&lt;/p&gt;

</description>
        <pubDate>Thu, 27 Feb 2014 10:00:00 +0100</pubDate>
        <link>https://www.tkalin.com/blog_posts/rails-4-disable-assets-caching-for-development-test-environments</link>
        <guid isPermaLink="true">https://www.tkalin.com/blog_posts/rails-4-disable-assets-caching-for-development-test-environments</guid>
        
        <category>rails</category>
        
        <category>rails4</category>
        
        
      </item>
    
      <item>
        <title>Quick PostgreSQL server optimization for development (or integration server)</title>
        <description>&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;I’ve made RSpec test suite for my Ruby on Rails application 18% faster by following a &lt;a href=&quot;http://www.postgresql.org/docs/current/static/non-durability.html&quot; title=&quot;Non-durable settings&quot;&gt;Non-durable PostgreSQL configuration&lt;/a&gt; guide.&lt;/p&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;When I’m developing (usually &lt;a href=&quot;http://rubyonrails.org/&quot; title=&quot;Ruby on Rails&quot;&gt;Ruby on Rails&lt;/a&gt;) applications using &lt;a href=&quot;http://www.postgresql.org/&quot; title=&quot;PostgreSQL&quot;&gt;PostgreSQL&lt;/a&gt; database server for persistence, I don’t need high durability of my development database (or integration server). What I care the most is it’s speed. I realize, however, that database server, probably, is not the bottle neck of the typical application test suite.&lt;/p&gt;

&lt;p&gt;Here I show how switching few options in the PostgreSQL config file increased performance of the test suite on my development machine (by reducing durability).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: I’m not performance testing ninja and all my performance tests are very subjective.
I test only what I care the most – execution time of the test suite for my current Ruby on Rails application.&lt;/p&gt;

&lt;h2 id=&quot;environment&quot;&gt;Environment&lt;/h2&gt;

&lt;p&gt;Hardware: Intel i7-3720QM CPU @ 2.60GHz, 16 Gb RAM
OS: Ubuntu 12.04.3 LTS
Software: Ruby on Rails 3.2.15, Ruby 2.0.0p247, Postgres 9.2.5&lt;/p&gt;

&lt;h2 id=&quot;about-the-application&quot;&gt;About the application&lt;/h2&gt;

&lt;p&gt;I have a monolithic Ruby on Rails application, with 18064/19132 (code/test) lines of code, with test suite of 1977 RSpec examples, some of which are javascript-enabled feature specs. I’m using &lt;a href=&quot;https://github.com/bmabey/database_cleaner&quot; title=&quot;database_cleaner&quot;&gt;database_cleaner&lt;/a&gt; gem for cleaning database between tests, with &lt;code class=&quot;highlighter-rouge&quot;&gt;transaction&lt;/code&gt; strategy for non-javascript specs and &lt;code class=&quot;highlighter-rouge&quot;&gt;truncation&lt;/code&gt; strategy for javascript specs. I’m running my test suite with wonderful &lt;a href=&quot;https://github.com/grosser/parallel_tests&quot; title=&quot;parallel_tests&quot;&gt;parallel_tests&lt;/a&gt; gem.&lt;/p&gt;

&lt;h2 id=&quot;default-postgresql-925-configuration&quot;&gt;Default PostgreSQL 9.2.5 configuration&lt;/h2&gt;

&lt;p&gt;Here are results of running full test suite on the clean PostgreSQL installation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; bin/stubs/parallel_rspec spec; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  1002.48s user 51.83s system 359% cpu 4:53.35 total
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; bin/stubs/parallel_rspec spec; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  1006.46s user 54.12s system 360% cpu 4:54.02 total
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; bin/stubs/parallel_rspec spec; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  1004.78s user 54.74s system 356% cpu 4:57.18 total&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or about 295 seconds in average.&lt;/p&gt;

&lt;h2 id=&quot;decreasing-durability&quot;&gt;Decreasing durability&lt;/h2&gt;

&lt;p&gt;According to the official &lt;a href=&quot;http://www.postgresql.org/docs/current/static/non-durability.html&quot; title=&quot;Non-durable configuration guide&quot;&gt;Non-durable configuration guide&lt;/a&gt;, I modified my &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/postgresql/9.2/main/postgresql.conf&lt;/code&gt; in the following way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-linux-config&quot; data-lang=&quot;linux-config&quot;&gt;# Turn off fsync; there is no need to flush data to disk.
fsync = &#39;off&#39;

# Turn off full_page_writes;
# there is no need to guard against partial page writes.
full_page_writes = &#39;off&#39;

# Increase checkpoint_segments and checkpoint_timeout ;
# this reduces the frequency of checkpoints,
# but increases the storage requirements of /pg_xlog.
checkpoint_segments = &#39;100&#39;
checkpoint_timeout = &#39;45min&#39;

# Turn off synchronous_commit;
# there might be no need to write the WAL to disk on every commit.
# This setting does risk transaction loss (though not data corruption)
# in case of a crash of the database alone.
synchronous_commit = &#39;off&#39;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; bin/stubs/parallel_rspec spec; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  1134.99s user 69.70s system 505% cpu 3:58.12 total
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; bin/stubs/parallel_rspec spec; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  1144.00s user 68.01s system 492% cpu 4:05.93 total
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; bin/stubs/parallel_rspec spec; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  1145.39s user 68.29s system 493% cpu 4:05.83 total&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or about 243 seconds in average, with more intensive CPU usage.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As we can see, very simple configuration change made execution of my test suite ~52 seconds (or ~18%) faster, which is pretty nice, I think.&lt;/p&gt;

</description>
        <pubDate>Sun, 10 Nov 2013 21:00:00 +0100</pubDate>
        <link>https://www.tkalin.com/blog_posts/quick-postgresql-server-optimization-for-development-or-integration-server</link>
        <guid isPermaLink="true">https://www.tkalin.com/blog_posts/quick-postgresql-server-optimization-for-development-or-integration-server</guid>
        
        <category>postgres</category>
        
        <category>rails</category>
        
        
      </item>
    
      <item>
        <title>Installing Adobe Air and Elance Tracker on Ubuntu 13.10 (Saucy Salamander) 64 bit</title>
        <description>&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Following instructions also work for Ubuntu 14.04 LTS Trusty Tahr 64 bit.&lt;/p&gt;

&lt;p&gt;After upgrading to Ubuntu 13.10 (Saucy) 64 bits, I had troubles installing Adobe Air and Elance Tracker air application. None of the guides available online worked for me. The guide that I used to install it on Ubuntu 13.04 didn’t work either. I would be happy not to use this piece of crap by Adobe, but, unfortunately,  Elance doesn’t want to build native tracker application for Linux, and I need it for my freelance work.&lt;/p&gt;

&lt;p&gt;After spending several hours digging around, finally I managed to install both Adobe Air and Elance Tracker application on my Ubuntu 13.10 64 box. Here is small guide for future reference.&lt;/p&gt;

&lt;h2 id=&quot;installing-adobe-air&quot;&gt;Installing Adobe Air&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install i386 libraries, that are required for successful installation and running of Adobe Air and air applications:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install libxt6:i386 libnspr4-0d:i386 libgtk2.0-0:i386 libstdc++6:i386 libnss3-1d:i386 lib32nss-mdns libxml2:i386 libxslt1.1:i386 libcanberra-gtk-module:i386 gtk2-engines-murrine:i386
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install libgnome-keyring0:i386:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install libgnome-keyring0:i386
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;&lt;strong&gt;If installation was successful, proceed to step 3.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Sometimes, it can’t be installed using &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;, causing error with dependencies. So we’ll need to download it and install manually. In fact, this is easy.&lt;/p&gt;

    &lt;p&gt;download deb-package using apt-get to &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /tmp
sudo apt-get download libgnome-keyring0:i386
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;extract deb-package into &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-keyring&lt;/code&gt; subfolder (&lt;strong&gt;note version in the file name, it may be different&lt;/strong&gt;):&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo dpkg-deb -R libgnome-keyring0_3.8.0-2_i386.deb gnome-keyring
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;install library in the system by copying:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo cp gnome-keyring/usr/lib/i386-linux-gnu/libgnome-keyring.so.0.2.0 /usr/lib/i386-linux-gnu/

sudo ln -s /usr/lib/i386-linux-gnu/libgnome-keyring.so.0.2.0 /usr/lib/i386-linux-gnu/libgnome-keyring.so.0
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create symlinks to gnome-keyring so Adobe Air could see it:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ln -s /usr/lib/i386-linux-gnu/libgnome-keyring.so.0 /usr/lib/libgnome-keyring.so.0

sudo ln -s /usr/lib/i386-linux-gnu/libgnome-keyring.so.0.2.0 /usr/lib/libgnome-keyring.so.0.2.0
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Download Adobe Air installer from Adobe official site: &lt;a href=&quot;http://helpx.adobe.com/air/kb/archived-air-sdk-version.html&quot;&gt;http://helpx.adobe.com/air/kb/archived-air-sdk-version.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install Adobe Air using downloaded installer (don’t forget to allow execution of the installer file):&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod a+x AdobeAIRInstaller.bin

sudo ./AdobeAIRInstaller.bin
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Adobe Air should be installed successfully now! Now you may remove excess symlinks:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rm /usr/lib/libgnome-keyring.so.0

sudo rm /usr/lib/libgnome-keyring.so.0.2.0
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;installing-elance-tracker&quot;&gt;Installing Elance Tracker&lt;/h2&gt;

&lt;p&gt;This is easy. Just download &lt;code class=&quot;highlighter-rouge&quot;&gt;TrackerSetup.deb&lt;/code&gt; package from Elance official site, and install it using command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    sudo dpkg -i TrackerSetup.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s it.&lt;/p&gt;

</description>
        <pubDate>Mon, 04 Nov 2013 10:00:00 +0100</pubDate>
        <link>https://www.tkalin.com/blog_posts/installing-adobe-air-and-elance-tracker-on-ubuntu-13-10-saucy-salamander-64-bit</link>
        <guid isPermaLink="true">https://www.tkalin.com/blog_posts/installing-adobe-air-and-elance-tracker-on-ubuntu-13-10-saucy-salamander-64-bit</guid>
        
        <category>ubuntu</category>
        
        
      </item>
    
      <item>
        <title>Protecting staging/testing site area</title>
        <description>&lt;p&gt;It seems, that the easiest way to protect staging/testing version of the (rails) application from search engines and undesired users is using HTTP Basic Authentication. Configuring it for nginx is very easy and well documented.&lt;/p&gt;

&lt;p&gt;First, enable HTTP Basic Authentication and specify passwords file location. To do this, add these lines to the site’s server config:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;auth_basic &quot;Testing Zone&quot;;
auth_basic_user_file /var/www/my_app/current/shared/config/.htpasswd;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Passwords file, specified in &lt;code class=&quot;highlighter-rouge&quot;&gt;auth_basic_user_file&lt;/code&gt; directive, should store users and &lt;strong&gt;encrypted&lt;/strong&gt; passwords in the following format:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user:pass
user2:pass2:comment
user3:pass3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To encrypt passwords using MD5, &lt;code class=&quot;highlighter-rouge&quot;&gt;htpasswd&lt;/code&gt; (goes with apache) or &lt;code class=&quot;highlighter-rouge&quot;&gt;openssl&lt;/code&gt; tools can be used:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl passwd -1 user_name
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then create ` /var/www/my_app/current/shared/config/.htpasswd` file with the user name and encrypted password:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user_name:$1$YSZFGvi9$BjAEmoG/a//a0UkNyzjMC/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then restart nginx, open your site and you’ll see login/password prompt.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Jul 2012 23:30:00 +0200</pubDate>
        <link>https://www.tkalin.com/blog_posts/protecting-staging-testing-site-area</link>
        <guid isPermaLink="true">https://www.tkalin.com/blog_posts/protecting-staging-testing-site-area</guid>
        
        <category>nginx</category>
        
        <category>rails</category>
        
        
      </item>
    
      <item>
        <title>Multiple file upload with Rails 3.2, paperclip, html5 and no javascript</title>
        <description>&lt;p&gt;Today, I was looking for a simple multiple file upload solution for &lt;a href=&quot;https://github.com/rails/rails&quot;&gt;Ruby on Rails 3.2&lt;/a&gt; with &lt;a href=&quot;https://github.com/thoughtbot/paperclip&quot;&gt;paperclip 3.0.4&lt;/a&gt; and found several jQuery and Flash solutions, like &lt;a href=&quot;http://www.uploadify.com/&quot;&gt;Uploadify&lt;/a&gt; or &lt;a href=&quot;https://github.com/blueimp/jQuery-File-Upload&quot;&gt;jQuery-File-Upload&lt;/a&gt;, buy they seemed to be too heavy and complicated for my case. I didn’t need asynchronous upload and other features they provide, I only needed really simple (ideally pure html) solution to save several images for my &lt;code class=&quot;highlighter-rouge&quot;&gt;Item&lt;/code&gt; model with regular form submit, but with possibility to select all images at once (in one input field).&lt;/p&gt;

&lt;p&gt;Luckily, there is html5 attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;multiple&lt;/code&gt; for input &lt;code class=&quot;highlighter-rouge&quot;&gt;type=&#39;file&#39;&lt;/code&gt;, which is already supported by  modern browsers (Opera, Firefox, Chrome, Safari), and that’s pretty ok for me. In the following code snippet, I’ll show, how I used this attribute and how I marked up my rails form make it work with &lt;a href=&quot;https://github.com/thoughtbot/paperclip&quot;&gt;paperclip&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As soon as IE doesn’t support &lt;code class=&quot;highlighter-rouge&quot;&gt;multiple&lt;/code&gt; attribute, the example below will allow to upload only one file for IE users.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/2790062.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;So basically I have &lt;code class=&quot;highlighter-rouge&quot;&gt;Item&lt;/code&gt; model, which has many &lt;code class=&quot;highlighter-rouge&quot;&gt;AttachedAsset&lt;/code&gt; models. &lt;code class=&quot;highlighter-rouge&quot;&gt;AttachedAsset&lt;/code&gt; model is used to store image with paperclip. All code in models and controller is very simple and found in paperclip’s HOWTOs. The only non-obvious part is &lt;code class=&quot;highlighter-rouge&quot;&gt;file_field_tag&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;new.html.haml&lt;/code&gt; template – it has tricky &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; (to be handled as array of &lt;code class=&quot;highlighter-rouge&quot;&gt;asset&lt;/code&gt; inside &lt;code class=&quot;highlighter-rouge&quot;&gt;attached_assets_attributes&lt;/code&gt;) and &lt;code class=&quot;highlighter-rouge&quot;&gt;multiple&lt;/code&gt; attributes is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 May 2012 21:00:00 +0200</pubDate>
        <link>https://www.tkalin.com/blog_posts/multiple-file-upload-with-rails-3-2-paperclip-html5-and-no-javascript</link>
        <guid isPermaLink="true">https://www.tkalin.com/blog_posts/multiple-file-upload-with-rails-3-2-paperclip-html5-and-no-javascript</guid>
        
        <category>rails</category>
        
        <category>paperclip</category>
        
        
      </item>
    
      <item>
        <title>Testing authorization using RSpec parametrized shared examples </title>
        <description>&lt;p&gt;I have a rails app, that uses Devise for authentication and CanCan for authorization. There is a group of controllers in my application, that should be accessible by administrators only. I was thinking about a DRY way to test these resources and their accessibility by administrators only (using request specs with RSpec and Capybara).&lt;/p&gt;

&lt;p&gt;The idea is to have shared examples, which try to visit resource url as unauthenicated user, authenicated non-privileged user and administrator, and check if desired resource was loaded or not. I will show, how I used RSpec’s shared examples (with resource url as parameter) for this.&lt;/p&gt;

&lt;p&gt;Create shared example group in &lt;code class=&quot;highlighter-rouge&quot;&gt;request_shared_examples.rb&lt;/code&gt; file in &lt;code class=&quot;highlighter-rouge&quot;&gt;spec/support&lt;/code&gt; directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shared_examples &quot;accessible by admin&quot; do |url|
  let(:url_path) { send(url) }

  context &quot;unauthenticated&quot; do
    it &quot;redirects to root page with error&quot; do
      visit url_path
      current_path.should == root_path
      page.should have_selector(&quot;.alert-error&quot;)
    end
  end

  context &quot;for unauthorized user&quot; do
    it &quot;redirects to root page with error&quot; do
      login_user(admin: false)
      visit url_path
      current_path.should == root_path
      page.should have_selector(&quot;.alert-error&quot;)
    end
  end

  context &quot;for authorized user&quot; do
    it &quot;displays page without errors&quot; do
      login_user(admin: true)
      visit url_path
      current_path.should == url_path
      page.should_not have_selector(&quot;.alert-error&quot;)
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Include these examples in your specs with &lt;code class=&quot;highlighter-rouge&quot;&gt;it_should_behave_like&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;describe &quot;Items&quot;, :type =&amp;gt; :request do
  it_should_behave_like(&quot;accessible by admin&quot;, :admin_items_path)
  # other examples
end

describe &quot;Categories&quot;, :type =&amp;gt; :request do
  it_should_behave_like(&quot;accessible by admin&quot;, :admin_categories_path)
  # other examples
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: I’m passing url helpers’ names as symbols and evaluate them in shared example group (with &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;send&lt;/code&gt;), because they can’t be evaluated in ExampleGroup context.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 May 2012 17:00:00 +0200</pubDate>
        <link>https://www.tkalin.com/blog_posts/testing-authorization-using-rspec-parametrized-shared-examples</link>
        <guid isPermaLink="true">https://www.tkalin.com/blog_posts/testing-authorization-using-rspec-parametrized-shared-examples</guid>
        
        <category>rails</category>
        
        <category>rspec</category>
        
        
      </item>
    
      <item>
        <title>Using console vim as vim:// protocol handler in Ubuntu</title>
        <description>&lt;p&gt;Do you want your browser to launch console vim and open specified file on specified line when you click link like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;vim:///etc/hosts&amp;amp;line=10&lt;/code&gt;? This article will show how to register console vim as &lt;code class=&quot;highlighter-rouge&quot;&gt;vim://&lt;/code&gt; protocol handler in Ubuntu 11.10. Just follow these steps:&lt;/p&gt;

&lt;h3 id=&quot;create-vim-launcher-script&quot;&gt;1. Create vim launcher script&lt;/h3&gt;

&lt;p&gt;We’ll need small vim launcher script, which will handle &lt;code class=&quot;highlighter-rouge&quot;&gt;vim://...&lt;/code&gt; uri. As a ruby programmer I wrote this script in Ruby (so it requires Ruby to be installed), but it can be rewritten to Perl/Python or even Bash. What it does, it just retrieves file name and &lt;code class=&quot;highlighter-rouge&quot;&gt;line&lt;/code&gt; parameter from URI string and launches &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-terminal&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt; inside, passing file name and line to open. Create &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/cvim&lt;/code&gt; file with content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#! /usr/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;uri&#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;cgi&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;full_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_path&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;full_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;vim_params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%Q[&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;&quot;]&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CGI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;vim_params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; +&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;sb&quot;&gt;`gnome-terminal -x vim &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vim_params&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, give it execute permissions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chmod a+x /usr/local/bin/cvim
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-desktop-file-for-our-new-launcher&quot;&gt;2. Create .desktop file for our new launcher&lt;/h3&gt;

&lt;p&gt;Now we will create .desktop launcher for our vim launcher, and tell Ubuntu to use this lauchner as &lt;code class=&quot;highlighter-rouge&quot;&gt;vim://&lt;/code&gt; protocol handler. Create ‘/usr/share/applications/cvim.desktop’ file with content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Desktop Entry]
Encoding=UTF-8
Name=Vim (Console)
Comment=Edit text files in a console using Vim
Exec=/usr/local/bin/cvim %U
Terminal=false
Type=Application
Icon=/usr/src/vim/runtime/vim48x48.xpm
Categories=Application;Utility;TextEditor;
MimeType=text/plain;x-scheme-handler/vim;
StartupNotify=true
StartupWMClass=CVIM
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;refresh-mime-types-database&quot;&gt;3. Refresh mime types database&lt;/h3&gt;

&lt;p&gt;In the file above, line &lt;code class=&quot;highlighter-rouge&quot;&gt;MimeType=text/plain;x-scheme-handler/vim;&lt;/code&gt; registers &lt;code class=&quot;highlighter-rouge&quot;&gt;vim://&lt;/code&gt; scheme handler, but to make it work we should update mime types database cache. Execute command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo update-desktop-database
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;test-from-terminal&quot;&gt;4. Test from terminal&lt;/h3&gt;

&lt;p&gt;Now everything should work. To test that it works from terminal, launch this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xdg-open &#39;vim:///etc/hosts?line=2&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And it should launch gnome-terminal with vim inside and open file &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; on line #2. If it works, your browser will do the same when you open link like this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; if you want files to be opened in one vim instance (in the new tab), make &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/cvim&lt;/code&gt; file look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#! /usr/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;uri&#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;cgi&#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;full_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;full_path&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;full_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;vim_params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;--remote-tab-silent&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CGI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;vim_params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; +&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;vim_params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%Q[ &quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;&quot;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;sb&quot;&gt;`gnome-terminal -x vim --servername VIM &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vim_params&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 23 Apr 2012 13:00:00 +0200</pubDate>
        <link>https://www.tkalin.com/blog_posts/using-console-vim-as-vim-protocol-handler-in-ubuntu</link>
        <guid isPermaLink="true">https://www.tkalin.com/blog_posts/using-console-vim-as-vim-protocol-handler-in-ubuntu</guid>
        
        <category>ubuntu</category>
        
        <category>vim</category>
        
        
      </item>
    
      <item>
        <title>Broadcasting your rhythmbox in ubuntu 11.10 </title>
        <description>&lt;p&gt;Once I decided to setup my rhythmbox broadcasting into local network (so my wife or home media player could connect and listen), and didn’t find any comprehensive guide, so I decided to write my own when I managed to configure it.&lt;/p&gt;

&lt;p&gt;I found a couple rhythmbox plugins for that, but they didn’t work for me, so I stopped on &lt;code class=&quot;highlighter-rouge&quot;&gt;icecast&lt;/code&gt; plus &lt;code class=&quot;highlighter-rouge&quot;&gt;darkice&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;installing-and-configuring-icecast&quot;&gt;Installing and configuring icecast&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.icecast.org/&quot;&gt;Icecast&lt;/a&gt; is free server software for streaming multimedia. We will use it to create streaming server on localhost.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo aptitude install icecast2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;configuration&quot;&gt;Configuration&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Open the file &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/icecast2/icecast.xml&lt;/code&gt; as root and change all passwords in &lt;code class=&quot;highlighter-rouge&quot;&gt;authentication&lt;/code&gt; section. You will use &lt;code class=&quot;highlighter-rouge&quot;&gt;source-password&lt;/code&gt; to connect darkice and &lt;code class=&quot;highlighter-rouge&quot;&gt;admin-password&lt;/code&gt; for admin web-interface.&lt;/li&gt;
  &lt;li&gt;Change &lt;code class=&quot;highlighter-rouge&quot;&gt;hostname&lt;/code&gt; parameter if you want to stream over the internet, or just leave &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt; for local network.&lt;/li&gt;
  &lt;li&gt;To enable icecast daemon, change flag to &lt;code class=&quot;highlighter-rouge&quot;&gt;ENABLED=true&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/default/icecast2&lt;/code&gt; file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Icecast will run on port 8000 (configurable), so you can access admin interface by this url: &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can start and stop icecast server using following commands&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo /etc/init.d/icecast2 start
sudo /etc/init.d/icecast2 stop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: if you (like me) don’t want icecast2 to be started automatically, you can disable it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo update-rc.d icecast2 disable
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;installing-and-configuring-darkice&quot;&gt;Installing and configuring darkice&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/darkice/&quot;&gt;DarkIce&lt;/a&gt; is a live audio streamer. It records audio from an audio interface (e.g. sound card), encodes it and sends it to a streaming server.&lt;/p&gt;

&lt;h3 id=&quot;installation-1&quot;&gt;Installation&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo aptitude install darkice
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;configuration-1&quot;&gt;Configuration&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Copy example darkice configuration to your home folder:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; cp /usr/share/doc/darkice/examples/darkice.cfg ~/
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;~/darkice.cfg&lt;/code&gt; in your favourite editor and configure like this:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [general]
 duration        = 0
 bufferSecs      = 1
 reconnect       = yes

 [input]
 device          = pulse
 sampleRate      = 44100
 bitsPerSample   = 16
 channel         = 2

 [icecast2-0]
 bitrateMode     = cbr
 format          = vorbis
 bitrate         = 320
 server          = localhost
 port            = 8000
 password        = &amp;lt;your-icecast-source-password&amp;gt;
 mountPoint      = sample.ogg
 name            = sample
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Note: change &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;your-icecast-source-password&amp;gt;&lt;/code&gt; to source-password from your &lt;code class=&quot;highlighter-rouge&quot;&gt;icecast.xml&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;I’m using Ogg Vorbis stream here, but you also can use mp3 stream just change &lt;code class=&quot;highlighter-rouge&quot;&gt;format&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;vorbis&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;mp3&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;mountpoint&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;sample.mp3&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run darkice&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo /etc/init.d/icecast2 start
 sudo darkice -c ~/darkice.cfg
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After that you can connect your clients to url: &lt;code class=&quot;highlighter-rouge&quot;&gt;http://&amp;lt;your-ip&amp;gt;:8000/sample.ogg&lt;/code&gt; and they will hear your pulseaudio input.&lt;/p&gt;

&lt;h2 id=&quot;streaming-your-pulseaudio-output-instead-of-input&quot;&gt;Streaming your pulseaudio output instead of input&lt;/h2&gt;

&lt;p&gt;As I said, after all steps above are completed, your clients will hear your input (microphone or line-in) instead of your output. You have several choices here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Connect your input to your output via audio cable. Most simple, but less flexible solution. No other instruction required for that.&lt;/li&gt;
  &lt;li&gt;Configure pulseaudio to redirect all your output to darkice input.
    &lt;ul&gt;
      &lt;li&gt;Install pavucontrol &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo aptitude install pavucontrol&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Ensure you are running &lt;code class=&quot;highlighter-rouge&quot;&gt;icecast2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;darkice&lt;/code&gt; as described above&lt;/li&gt;
      &lt;li&gt;Launch &lt;code class=&quot;highlighter-rouge&quot;&gt;pavucontrol&lt;/code&gt; GUI&lt;/li&gt;
      &lt;li&gt;Open the ‘Recording’ tab&lt;/li&gt;
      &lt;li&gt;Find &lt;code class=&quot;highlighter-rouge&quot;&gt;ALSA plugin [darkice]:&lt;/code&gt; and change it’s source to &lt;code class=&quot;highlighter-rouge&quot;&gt;Monitor of &amp;lt;your-sound-source&amp;gt;&lt;/code&gt; using button near speaker icon&lt;/li&gt;
      &lt;li&gt;That’s it, connect your clients to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://&amp;lt;your-ip&amp;gt;:8000/sample.ogg&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Configure pulseaudio to redirect just your rhythmbox (or other player’s) output to darkice. This is what I’ve chosen because I keep all my other sounds in my laptop speakers and stream only music played by rhythmbox. But this will work only if you have several output sources like me (I have main output and HDMI output through my videocard)
    &lt;ul&gt;
      &lt;li&gt;Install pavucontrol &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo aptitude install pavucontrol&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Ensure you are running &lt;code class=&quot;highlighter-rouge&quot;&gt;icecast2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;darkice&lt;/code&gt; as described above&lt;/li&gt;
      &lt;li&gt;Launch &lt;code class=&quot;highlighter-rouge&quot;&gt;pavucontrol&lt;/code&gt; GUI&lt;/li&gt;
      &lt;li&gt;Open the ‘Recording’ tab&lt;/li&gt;
      &lt;li&gt;Find &lt;code class=&quot;highlighter-rouge&quot;&gt;ALSA plugin [darkice]:&lt;/code&gt; and change it’s source to &lt;code class=&quot;highlighter-rouge&quot;&gt;Monitor of &amp;lt;your-secondary-source&amp;gt;&lt;/code&gt; using button near speaker icon (I’ve chose HDMI here)&lt;/li&gt;
      &lt;li&gt;Open the ‘Playback’ tab&lt;/li&gt;
      &lt;li&gt;Find &lt;code class=&quot;highlighter-rouge&quot;&gt;Rhythmbox section&lt;/code&gt; (rhythmbox should be running) and change and change it’s destination to ‘&lt;your-secondary-source&gt;&#39; using button near speaker icon (I&#39;ve chose HDMI here)&lt;/your-secondary-source&gt;&lt;/li&gt;
      &lt;li&gt;That’s it, connect your clients to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://&amp;lt;your-ip&amp;gt;:8000/sample.ogg&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it.&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Mar 2012 13:00:00 +0200</pubDate>
        <link>https://www.tkalin.com/blog_posts/broadcasting-your-rhythmbox-in-ubuntu-11-10</link>
        <guid isPermaLink="true">https://www.tkalin.com/blog_posts/broadcasting-your-rhythmbox-in-ubuntu-11-10</guid>
        
        <category>ubuntu</category>
        
        
      </item>
    
  </channel>
</rss>
